#!/usr/bin/stap

global memory_allocated;
global memory_freed;
global reqs;


probe process("/lib/libc.so.6").function("malloc").call {
    if (execname() == "hashmap_memoryu"){
        req = register("rdi");
        // printf("req is %d\n", req);
        reqs = req; //(req + 15) & ~(15);
    }
}

probe process("/lib/libc.so.6").function("malloc").return {
    if (execname() == "hashmap_memoryu"){
        ret = register("rax") ;
        z = ret - 8 ;
        if (ret != 0){
            allocated = @uderef(8, z)- 1 ;
            memory_allocated[allocated] <<< reqs;
            memory_occupid += allocated;
        }
    }
}

probe process("/lib/libc.so.6").function("free").call {
    if (execname() == "hashmap_memoryu"){
        ret = register("rdi");
        z = ret - 8;
        // printf("ret is %d\n", ret);
        if (ret != 0){
          freed = @uderef(8, z) - 1 ;
          memory_freed[freed] <<< freed;
          memory_occupid -= freed;
        }
    }

}

probe begin{
    printf("start monitoring memory allocation request...\n");
}

probe end{

    printf("memory malloced....\n");

    foreach(malloc+ in memory_allocated){
        printf("memory_allocated[%9d] => min: %9d, max: %9d, count: %9d\n", malloc,               
                @min(memory_allocated[malloc]),
                @max(memory_allocated[malloc]),
                @count(memory_allocated[malloc])
              );

    }

    printf("memory freed....\n");
    foreach(malloc+ in memory_freed){
        printf("memory_freed[%9d] => min: %9d, max: %9d, count: %9d\n", malloc, 
                @min(memory_freed[malloc]),
                @max(memory_freed[malloc]),
                @count(memory_freed[malloc])
              );
    }

}
